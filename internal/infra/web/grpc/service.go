package grpc

import (
	"context"

	"github.com/gustavo-nomelini/golang-clean-architecture/internal/usecase"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer struct {
	ListOrdersUseCase  *usecase.ListOrdersUseCase
	CreateOrderUseCase *usecase.CreateOrderUseCase
	UnimplementedOrderServiceServer
}

// UnimplementedOrderServiceServer must be embedded for forward compatibility
type UnimplementedOrderServiceServer struct{}

// Define Order message for gRPC
type Order struct {
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price      float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Tax        float64                `protobuf:"fixed64,3,opt,name=tax,proto3" json:"tax,omitempty"`
	FinalPrice float64                `protobuf:"fixed64,4,opt,name=final_price,json=finalPrice,proto3" json:"final_price,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

// ListOrdersRequest is the request for ListOrders
type ListOrdersRequest struct{}

// ListOrdersResponse is the response from ListOrders
type ListOrdersResponse struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

// CreateOrderRequest defines the request structure for creating an order
type CreateOrderRequest struct {
	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Tax   float64 `protobuf:"fixed64,3,opt,name=tax,proto3" json:"tax,omitempty"`
}

// CreateOrderResponse defines the response structure for creating an order
type CreateOrderResponse struct {
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

// NewOrderServiceServer creates a new OrderServiceServer
func NewOrderServiceServer(
	listOrdersUseCase *usecase.ListOrdersUseCase,
	createOrderUseCase *usecase.CreateOrderUseCase,
) *OrderServiceServer {
	return &OrderServiceServer{
		ListOrdersUseCase:  listOrdersUseCase,
		CreateOrderUseCase: createOrderUseCase,
	}
}

// ListOrders lists all orders
func (s *OrderServiceServer) ListOrders(ctx context.Context, req *ListOrdersRequest) (*ListOrdersResponse, error) {
	orders, err := s.ListOrdersUseCase.Execute()
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to list orders: %v", err)
	}

	var grpcOrders []*Order
	for _, o := range orders {
		grpcOrders = append(grpcOrders, &Order{
			Id:         o.ID,
			Price:      o.Price,
			Tax:        o.Tax,
			FinalPrice: o.FinalPrice,
			CreatedAt:  timestamppb.New(o.CreatedAt),
		})
	}

	return &ListOrdersResponse{Orders: grpcOrders}, nil
}

// CreateOrder creates a new order
func (s *OrderServiceServer) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	order, err := s.CreateOrderUseCase.Execute(usecase.CreateOrderInput{
		ID:    req.Id,
		Price: req.Price,
		Tax:   req.Tax,
	})
	if err != nil {
		return nil, status.Errorf(codes.Internal, "failed to create order: %v", err)
	}

	return &CreateOrderResponse{
		Order: &Order{
			Id:         order.ID,
			Price:      order.Price,
			Tax:        order.Tax,
			FinalPrice: order.FinalPrice,
			CreatedAt:  timestamppb.New(order.CreatedAt),
		},
	}, nil
}

// Register registers the server with the gRPC server
func Register(s *grpc.Server, server *OrderServiceServer) {
	RegisterOrderServiceServer(s, server)
}

// RegisterOrderServiceServer registers the server
func RegisterOrderServiceServer(s *grpc.Server, srv *OrderServiceServer) {
	// This would normally be generated by protoc
	// We're implementing a simplified version for this example
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

// _OrderService_serviceDesc is the gRPC service descriptor.
var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderService_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(*OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(*OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(*OrderServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(*OrderServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}
